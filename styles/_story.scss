@use 'sass:math';

.story {
  // Fit story container to its contents
  display: inline-flex;
  flex-direction: column;
  border: solid $story-border-width $story-border-color;
  border-radius: 5px;
  background-color: $color-gray-light;
  overflow: hidden;
}

.story-stage {
  display: inline-block;
  position: relative;
  background-color: $color-white;
  // If supported by the user's browser, keep the frame contained within the
  // viewport while also maintaining the aspect ratio
  @supports (aspect-ratio: auto) {
    $app-height-minus-frame: 124px;
    max-width: 100vw;
    // Because calc() accepts mathematical expressions, we need to wrap the
    // below variable in #{} so that calc() evaluates the raw numbers and not
    // the string variable name
    max-height: calc(100vh - #{$app-height-minus-frame});
    aspect-ratio: $frame-aspect-ratio;
    @include is-mobile() {
      $timeline-height: 36px;
      $app-mobile-height-minus-frame: $app-height-minus-frame + $timeline-height;
      max-height: calc(100vh - #{$app-mobile-height-minus-frame});
    }
  }
}

.selected-frame,
.previous-frame {
  // Shrink the displayed width/height canvas by half
  width: 100%;
  max-width: $frame-width;
  max-height: $frame-height;
  aspect-ratio: inherit;
}

.previous-frame {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
  .story-playing & {
    display: none;
  }
}
.previous-frame-1 {
  opacity: 0.3;
}
.previous-frame-2 {
  opacity: 0.2;
}
.previous-frame-3 {
  opacity: 0.1;
}
.previous-frame-4 {
  opacity: 0.05;
}

.selected-frame {
  position: relative;
  z-index: 10;
}

.story-controls {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  border: solid 1px $panel-background-color;
  border-left: 0;
  border-right: 0;
  border-bottom: 0;
  padding: 0 8px;
  background-color: $panel-background-color;
  white-space: nowrap;
  @include is-mobile() {
    border-left: 1px;
    border-right: 1px;
    padding: 0;
    justify-content: space-between;
    flex-wrap: wrap;
  }
}
